// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TimeCafe.Core.Models;
using TimeCafe.Persistence;

#nullable disable

namespace TimeCafe.Persistence.Migrations;

[DbContext(typeof(TimeCafeContext))]
[Migration("20250628120701_AddThemeSeeding")]
partial class AddThemeSeeding
{
    /// <inheritdoc />
    protected override void BuildTargetModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
        modelBuilder
            .UseCollation("Cyrillic_General_CI_AS")
            .HasAnnotation("ProductVersion", "9.0.5")
            .HasAnnotation("Relational:MaxIdentifierLength", 128);

        SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

        modelBuilder.Entity("TimeCafe.Core.Models.BillingType", b =>
            {
                b.Property<int>("BillingTypeId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BillingTypeId"));

                b.Property<string>("BillingTypeName")
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnType("nvarchar(20)");

                b.HasKey("BillingTypeId")
                    .HasName("PK__BillingT__5233EF23A53230B5");

                b.HasIndex(new[] { "BillingTypeName" }, "IX_BillingTypes_Name")
                    .IsUnique()
                    .HasFilter("([BillingTypeName] IS NOT NULL)");

                b.ToTable("BillingTypes");

                b.HasData(
                    new
                    {
                        BillingTypeId = 1,
                        BillingTypeName = "Почасовая"
                    },
                    new
                    {
                        BillingTypeId = 2,
                        BillingTypeName = "Поминутная"
                    });
            });

        modelBuilder.Entity("TimeCafe.Core.Models.Client", b =>
            {
                b.Property<int>("ClientId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"));

                b.Property<string>("AccessCardNumber")
                    .HasMaxLength(20)
                    .HasColumnType("nvarchar(20)");

                b.Property<DateOnly?>("BirthDate")
                    .HasColumnType("date");

                b.Property<DateTime>("CreatedAt")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                b.Property<string>("Email")
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.Property<string>("FirstName")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.Property<int?>("GenderId")
                    .HasColumnType("int");

                b.Property<string>("LastName")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.Property<string>("MiddleName")
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.Property<string>("PhoneNumber")
                    .HasMaxLength(20)
                    .HasColumnType("nvarchar(20)");

                b.Property<byte[]>("Photo")
                    .HasColumnType("varbinary(max)");

                b.Property<string>("RefusalReason")
                    .HasMaxLength(1000)
                    .HasColumnType("nvarchar(1000)");

                b.Property<int?>("StatusId")
                    .HasColumnType("int");

                b.HasKey("ClientId")
                    .HasName("PK__Clients__E67E1A244E706CCA");

                b.HasIndex("GenderId");

                b.HasIndex("StatusId");

                b.HasIndex(new[] { "AccessCardNumber" }, "IX_Clients_AccessCardNumber")
                    .IsUnique()
                    .HasFilter("([AccessCardNumber] IS NOT NULL)");

                b.HasIndex(new[] { "Email" }, "IX_Clients_Email")
                    .IsUnique()
                    .HasFilter("([Email] IS NOT NULL)");

                b.HasIndex(new[] { "PhoneNumber" }, "IX_Clients_PhoneNumber")
                    .IsUnique()
                    .HasFilter("([PhoneNumber] IS NOT NULL)");

                b.ToTable("Clients");
            });

        modelBuilder.Entity("TimeCafe.Core.Models.ClientAdditionalInfo", b =>
            {
                b.Property<int>("InfoId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InfoId"));

                b.Property<int?>("ClientId")
                    .HasColumnType("int");

                b.Property<DateTime>("CreatedAt")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                b.Property<string>("InfoText")
                    .IsRequired()
                    .HasMaxLength(1000)
                    .HasColumnType("nvarchar(1000)");

                b.HasKey("InfoId")
                    .HasName("PK__ClientAd__4DEC9D7A0A15EECD");

                b.HasIndex("ClientId");

                b.ToTable("ClientAdditionalInfo", (string)null);
            });

        modelBuilder.Entity("TimeCafe.Core.Models.ClientStatus", b =>
            {
                b.Property<int>("StatusId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatusId"));

                b.Property<string>("StatusName")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.HasKey("StatusId")
                    .HasName("PK__ClientSt__C8EE2063B82E1A46");

                b.ToTable("ClientStatuses");

                b.HasData(
                    new
                    {
                        StatusId = 1,
                        StatusName = "Черновик"
                    },
                    new
                    {
                        StatusId = 2,
                        StatusName = "Активный"
                    },
                    new
                    {
                        StatusId = 3,
                        StatusName = "Отказ от услуг"
                    });
            });

        modelBuilder.Entity("TimeCafe.Core.Models.FinancialTransaction", b =>
            {
                b.Property<int>("TransactionId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                b.Property<decimal>("Amount")
                    .HasColumnType("decimal(10, 2)");

                b.Property<int?>("ClientId")
                    .HasColumnType("int");

                b.Property<string>("Comment")
                    .HasColumnType("nvarchar(max)");

                b.Property<DateTime>("TransactionDate")
                    .HasColumnType("datetime");

                b.Property<int?>("TransactionTypeId")
                    .HasColumnType("int");

                b.Property<int?>("VisitId")
                    .HasColumnType("int");

                b.HasKey("TransactionId")
                    .HasName("PK__Financia__55433A6B57033591");

                b.HasIndex("ClientId");

                b.HasIndex("TransactionTypeId");

                b.HasIndex("VisitId");

                b.HasIndex(new[] { "TransactionDate" }, "IX_FinancialTransactions_TransactionDate");

                b.ToTable("FinancialTransactions");
            });

        modelBuilder.Entity("TimeCafe.Core.Models.Gender", b =>
            {
                b.Property<int>("GenderId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenderId"));

                b.Property<string>("GenderName")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.HasKey("GenderId")
                    .HasName("PK__Genders__4E24E9F72615BBD8");

                b.HasIndex(new[] { "GenderName" }, "UQ__Genders__F7C1771527CC73EB")
                    .IsUnique();

                b.ToTable("Genders");

                b.HasData(
                    new
                    {
                        GenderId = 1,
                        GenderName = "Мужской"
                    },
                    new
                    {
                        GenderId = 2,
                        GenderName = "Женский"
                    },
                    new
                    {
                        GenderId = 3,
                        GenderName = "Не указан"
                    });
            });

        modelBuilder.Entity("TimeCafe.Core.Models.PhoneConfirmation", b =>
            {
                b.Property<int>("ConfirmationId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConfirmationId"));

                b.Property<int?>("ClientId")
                    .HasColumnType("int");

                b.Property<string>("ConfirmationCode")
                    .IsRequired()
                    .HasMaxLength(5)
                    .HasColumnType("nvarchar(5)");

                b.Property<DateTime>("GeneratedTime")
                    .HasColumnType("datetime");

                b.Property<bool>("IsConfirmed")
                    .HasColumnType("bit");

                b.Property<string>("PhoneNumber")
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnType("nvarchar(20)");

                b.HasKey("ConfirmationId")
                    .HasName("PK__PhoneCon__262D285D0713E163");

                b.HasIndex("ClientId");

                b.ToTable("PhoneConfirmations");
            });

        modelBuilder.Entity("TimeCafe.Core.Models.Tariff", b =>
            {
                b.Property<int>("TariffId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TariffId"));

                b.Property<int>("BillingTypeId")
                    .HasColumnType("int");

                b.Property<DateTime>("CreatedAt")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                b.Property<string>("Description")
                    .HasMaxLength(1000)
                    .HasColumnType("nvarchar(1000)");

                b.Property<string>("DescriptionTitle")
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.Property<byte[]>("Icon")
                    .HasColumnType("varbinary(max)");

                b.Property<DateTime>("LastModified")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                b.Property<decimal>("Price")
                    .HasColumnType("decimal(10, 2)");

                b.Property<string>("TariffName")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.Property<int?>("ThemeId")
                    .HasColumnType("int");

                b.HasKey("TariffId")
                    .HasName("PK__Tariffs__EBAF9DB359050E55");

                b.HasIndex("BillingTypeId");

                b.HasIndex("ThemeId");

                b.HasIndex(new[] { "TariffName" }, "IX_Tariffs_TariffName")
                    .IsUnique()
                    .HasFilter("([TariffName] IS NOT NULL)");

                b.ToTable("Tariffs", t =>
                    {
                        t.HasTrigger("TRG_Tariffs_UpdateLastModified");
                    });

                b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
            });

        modelBuilder.Entity("TimeCafe.Core.Models.Theme", b =>
            {
                b.Property<int>("ThemeId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ThemeId"));

                b.Property<string>("TechnicalName")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.Property<string>("ThemeName")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.HasKey("ThemeId")
                    .HasName("PK__Themes__FBB3E4D9A31F20F0");

                b.HasIndex(new[] { "TechnicalName" }, "IX_Themes_TechnicalName")
                    .IsUnique()
                    .HasFilter("([TechnicalName] IS NOT NULL)");

                b.HasIndex(new[] { "ThemeName" }, "IX_Themes_ThemeName")
                    .IsUnique()
                    .HasFilter("([ThemeName] IS NOT NULL)");

                b.ToTable("Themes");

                b.HasData(
                    new
                    {
                        ThemeId = 1,
                        TechnicalName = "Red",
                        ThemeName = "Красный"
                    },
                    new
                    {
                        ThemeId = 2,
                        TechnicalName = "Orange",
                        ThemeName = "Оранжевый"
                    },
                    new
                    {
                        ThemeId = 3,
                        TechnicalName = "Amber",
                        ThemeName = "Янтарный"
                    },
                    new
                    {
                        ThemeId = 4,
                        TechnicalName = "Yellow",
                        ThemeName = "Желтый"
                    },
                    new
                    {
                        ThemeId = 5,
                        TechnicalName = "Lime",
                        ThemeName = "Лаймовый"
                    },
                    new
                    {
                        ThemeId = 6,
                        TechnicalName = "Green",
                        ThemeName = "Зеленый"
                    },
                    new
                    {
                        ThemeId = 7,
                        TechnicalName = "Emerald",
                        ThemeName = "Изумрудный"
                    },
                    new
                    {
                        ThemeId = 8,
                        TechnicalName = "Teal",
                        ThemeName = "Бирюзовый"
                    },
                    new
                    {
                        ThemeId = 9,
                        TechnicalName = "Cyan",
                        ThemeName = "Голубой"
                    },
                    new
                    {
                        ThemeId = 10,
                        TechnicalName = "Sky",
                        ThemeName = "Небесный"
                    },
                    new
                    {
                        ThemeId = 11,
                        TechnicalName = "Blue",
                        ThemeName = "Синий"
                    },
                    new
                    {
                        ThemeId = 12,
                        TechnicalName = "Indigo",
                        ThemeName = "Индиго"
                    },
                    new
                    {
                        ThemeId = 13,
                        TechnicalName = "Violet",
                        ThemeName = "Фиолетовый"
                    },
                    new
                    {
                        ThemeId = 14,
                        TechnicalName = "Purple",
                        ThemeName = "Пурпурный"
                    },
                    new
                    {
                        ThemeId = 15,
                        TechnicalName = "Fuchsia",
                        ThemeName = "Фуксия"
                    },
                    new
                    {
                        ThemeId = 16,
                        TechnicalName = "Pink",
                        ThemeName = "Розовый"
                    },
                    new
                    {
                        ThemeId = 17,
                        TechnicalName = "Rose",
                        ThemeName = "Роза"
                    },
                    new
                    {
                        ThemeId = 18,
                        TechnicalName = "Slate",
                        ThemeName = "Сланец"
                    },
                    new
                    {
                        ThemeId = 19,
                        TechnicalName = "Gray",
                        ThemeName = "Серый"
                    },
                    new
                    {
                        ThemeId = 20,
                        TechnicalName = "Zinc",
                        ThemeName = "Цинк"
                    },
                    new
                    {
                        ThemeId = 21,
                        TechnicalName = "Neutral",
                        ThemeName = "Нейтральный"
                    },
                    new
                    {
                        ThemeId = 22,
                        TechnicalName = "Stone",
                        ThemeName = "Камень"
                    });
            });

        modelBuilder.Entity("TimeCafe.Core.Models.TransactionType", b =>
            {
                b.Property<int>("TransactionTypeId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionTypeId"));

                b.Property<string>("TransactionTypeName")
                    .IsRequired()
                    .HasMaxLength(20)
                    .HasColumnType("nvarchar(20)");

                b.HasKey("TransactionTypeId")
                    .HasName("PK__Transact__20266D0B29C99FD2");

                b.HasIndex(new[] { "TransactionTypeName" }, "IX_TransactionTypes_Name")
                    .IsUnique()
                    .HasFilter("([TransactionTypeName] IS NOT NULL)");

                b.ToTable("TransactionTypes");

                b.HasData(
                    new
                    {
                        TransactionTypeId = 1,
                        TransactionTypeName = "Пополнение"
                    },
                    new
                    {
                        TransactionTypeId = 2,
                        TransactionTypeName = "Списание"
                    });
            });

        modelBuilder.Entity("TimeCafe.Core.Models.Visit", b =>
            {
                b.Property<int>("VisitId")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("int");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitId"));

                b.Property<int?>("BillingTypeId")
                    .HasColumnType("int");

                b.Property<int?>("ClientId")
                    .HasColumnType("int");

                b.Property<DateTime>("EntryTime")
                    .HasColumnType("datetime");

                b.Property<DateTime?>("ExitTime")
                    .HasColumnType("datetime");

                b.Property<int?>("TariffId")
                    .HasColumnType("int");

                b.Property<decimal?>("VisitCost")
                    .HasColumnType("decimal(10, 2)");

                b.HasKey("VisitId")
                    .HasName("PK__Visits__4D3AA1DEECB6D8F4");

                b.HasIndex("BillingTypeId");

                b.HasIndex("ClientId");

                b.HasIndex("TariffId");

                b.HasIndex(new[] { "EntryTime" }, "IX_Visits_EntryTime");

                b.HasIndex(new[] { "ExitTime" }, "IX_Visits_ExitTime");

                b.ToTable("Visits");
            });

        modelBuilder.Entity("TimeCafe.Core.Models.Client", b =>
            {
                b.HasOne("TimeCafe.Core.Models.Gender", "Gender")
                    .WithMany("Clients")
                    .HasForeignKey("GenderId")
                    .HasConstraintName("FK__Clients__GenderI__2354350C");

                b.HasOne("TimeCafe.Core.Models.ClientStatus", "Status")
                    .WithMany("Clients")
                    .HasForeignKey("StatusId")
                    .HasConstraintName("FK__Clients__StatusI__24485945");

                b.Navigation("Gender");

                b.Navigation("Status");
            });

        modelBuilder.Entity("TimeCafe.Core.Models.ClientAdditionalInfo", b =>
            {
                b.HasOne("TimeCafe.Core.Models.Client", "Client")
                    .WithMany("ClientAdditionalInfos")
                    .HasForeignKey("ClientId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK__ClientAdd__Clien__2818EA29");

                b.Navigation("Client");
            });

        modelBuilder.Entity("TimeCafe.Core.Models.FinancialTransaction", b =>
            {
                b.HasOne("TimeCafe.Core.Models.Client", "Client")
                    .WithMany("FinancialTransactions")
                    .HasForeignKey("ClientId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK__Financial__Clien__4E3E9311");

                b.HasOne("TimeCafe.Core.Models.TransactionType", "TransactionType")
                    .WithMany("FinancialTransactions")
                    .HasForeignKey("TransactionTypeId")
                    .HasConstraintName("FK__Financial__Trans__4F32B74A");

                b.HasOne("TimeCafe.Core.Models.Visit", "Visit")
                    .WithMany("FinancialTransactions")
                    .HasForeignKey("VisitId")
                    .HasConstraintName("FK__Financial__Visit__5026DB83");

                b.Navigation("Client");

                b.Navigation("TransactionType");

                b.Navigation("Visit");
            });

        modelBuilder.Entity("TimeCafe.Core.Models.PhoneConfirmation", b =>
            {
                b.HasOne("TimeCafe.Core.Models.Client", "Client")
                    .WithMany("PhoneConfirmations")
                    .HasForeignKey("ClientId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK__PhoneConf__Clien__5303482E");

                b.Navigation("Client");
            });

        modelBuilder.Entity("TimeCafe.Core.Models.Tariff", b =>
            {
                b.HasOne("TimeCafe.Core.Models.BillingType", "BillingType")
                    .WithMany("Tariffs")
                    .HasForeignKey("BillingTypeId")
                    .IsRequired()
                    .HasConstraintName("FK_Tariffs_BillingTypes");

                b.HasOne("TimeCafe.Core.Models.Theme", "Theme")
                    .WithMany("Tariffs")
                    .HasForeignKey("ThemeId")
                    .HasConstraintName("FK__Tariffs__ThemeId__2BE97B0D");

                b.Navigation("BillingType");

                b.Navigation("Theme");
            });

        modelBuilder.Entity("TimeCafe.Core.Models.Visit", b =>
            {
                b.HasOne("TimeCafe.Core.Models.BillingType", "BillingType")
                    .WithMany("Visits")
                    .HasForeignKey("BillingTypeId")
                    .HasConstraintName("FK__Visits__BillingT__4979DDF4");

                b.HasOne("TimeCafe.Core.Models.Client", "Client")
                    .WithMany("Visits")
                    .HasForeignKey("ClientId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK__Visits__ClientId__47919582");

                b.HasOne("TimeCafe.Core.Models.Tariff", "Tariff")
                    .WithMany("Visits")
                    .HasForeignKey("TariffId")
                    .HasConstraintName("FK__Visits__TariffId__4885B9BB");

                b.Navigation("BillingType");

                b.Navigation("Client");

                b.Navigation("Tariff");
            });

        modelBuilder.Entity("TimeCafe.Core.Models.BillingType", b =>
            {
                b.Navigation("Tariffs");

                b.Navigation("Visits");
            });

        modelBuilder.Entity("TimeCafe.Core.Models.Client", b =>
            {
                b.Navigation("ClientAdditionalInfos");

                b.Navigation("FinancialTransactions");

                b.Navigation("PhoneConfirmations");

                b.Navigation("Visits");
            });

        modelBuilder.Entity("TimeCafe.Core.Models.ClientStatus", b =>
            {
                b.Navigation("Clients");
            });

        modelBuilder.Entity("TimeCafe.Core.Models.Gender", b =>
            {
                b.Navigation("Clients");
            });

        modelBuilder.Entity("TimeCafe.Core.Models.Tariff", b =>
            {
                b.Navigation("Visits");
            });

        modelBuilder.Entity("TimeCafe.Core.Models.Theme", b =>
            {
                b.Navigation("Tariffs");
            });

        modelBuilder.Entity("TimeCafe.Core.Models.TransactionType", b =>
            {
                b.Navigation("FinancialTransactions");
            });

        modelBuilder.Entity("TimeCafe.Core.Models.Visit", b =>
            {
                b.Navigation("FinancialTransactions");
            });
#pragma warning restore 612, 618
    }
}
